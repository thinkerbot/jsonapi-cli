#!/usr/bin/env ruby
require 'rubygems'
require 'bundler'
Bundler.setup

begin
  require 'optparse'
  require 'jsonapi_cli'
  require 'json'
  require 'shellwords'

  options = JsonapiCli.options(
    :mode => :objects,
    :num  => 1,
    :resource_options => {},
  )
  OptionParser.new do |opts|
    opts.banner = %{
usage: jsonapi-generate [options] RESOURCE[:COUNT] ...

  Generate requests from resource descriptions.

options:

}.lstrip

    opts.on("-A", "--attributes", "generate attributes") do
      options[:mode] = :attributes
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts JsonapiCli.version
      exit
    end

    opts.on("-l", "--list", "list available resources") do
      options[:mode] = :list
    end

    opts.on("-L", "--list-mode MODE", "sets list mode ") do |value|
      options[:resource_options][:list_mode] = value.to_sym
    end

    opts.on("-n", "--num NUM", "number of sets to generate") do |value|
      options[:num] = value
    end

    opts.on("-O", "--objects", "generate resource objects (default)") do
      options[:mode] = :objects
    end

    opts.on("-P", "--responses", "generate responses") do
      options[:mode] = :responses
    end

    opts.on("-Q", "--requests", "generate requests") do
      options[:mode] = :requests
    end

    opts.on("-s", "--seed SEED", "set seed value") do |value|
      options[:seed] = value
    end

  end.parse!

  config = JsonapiCli.setup(options)
  resource_specs = ARGV.dup; ARGV.clear

  mode = options[:mode]

  if mode == :list
    puts config.resource_classes.map(&:type).sort.join("\n")
    exit
  end

  $stderr.puts "seed: #{config.seed}"

  num_sets = options[:num].to_i
  resource_options = options[:resource_options]

  num_sets.times do |i|
    config.reset if i > 0

    cache = config.cache
    Random.srand(config.seed)

    resource_specs.each do |spec|
      type, num = spec.split(":", 2)
      num ||= 1

      resource_class = config.resource_class(type)
      num.to_i.times do
        resource = resource_class.create(resource_options, cache)
        resource.save
      end
    end

    unless mode == :attributes
      Random.srand(config.seed)
      picks = []

      cache.each do |resource|
        resource.class.relationships.properties.each_pair do |name, relationship|
          picks.concat relationship.generate_picks(resource)
        end
      end

      picks.each do |resource, relationship, index|
        relationship.process_pick(resource, index)
      end
    end

    Random.srand(config.seed)
    cache.each do |resource|
      case mode
      when :objects
        puts resource.object.to_json
      when :attributes
        puts resource.attributes.to_json
      when :responses
        puts resource.response.to_json
      when :requests
        puts resource.request.to_json
      end
    end
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
end

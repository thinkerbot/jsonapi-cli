#!/usr/bin/env ruby
require 'rubygems'
require 'bundler'
Bundler.setup

begin
  require 'optparse'
  require 'jsonapi_cli'
  require 'jsonapi_cli/resource'
  require 'json'
  require 'shellwords'

  options = {
    :mode => :payloads,
  }
  OptionParser.new do |opts|
    opts.banner = %{
usage: jsonapi-generate [options] RESOURCE_FILES...

  Generate payloads from resource descriptions.

options:

}.lstrip

    opts.on("--[no-]attributes-only", "generate attributes onlu") do |value|
      options[:mode] = value ? :attributes : :payloads
    end

    opts.on("-c", "--curl", "generate curl requests") do
      options[:mode] = :curl
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts JsonapiCli.version
      exit
    end

  end.parse!

  resource_files = ARGV.dup; ARGV.clear
  resource_files.each {|file| require File.expand_path(file) }

  seed = 0
  Random.srand(seed)

  mode = options[:mode]

  actions = [
    [:read],
    [:create, :id],
    [:read],
    [:read,   :id],
    [:update, :id],
    [:delete, :id],
    [:read,   :id],
    [:read],
  ]

  JsonapiCli::Resource.each do |resource_class|
    resource = resource_class.new
    case mode
    when :attributes
      puts resource.attributes.to_json
    when :payloads
      puts resource.payload.to_json
    when :curl
      dir = "tmp/#{resource.type}"

      actions.each do |action, id|
        action, url, headers, payload = resource.crud(action, id)
        command = ["curl", "-X", action]
        headers.each_pair {|key, value| command << ["-H", "#{key}=#{value}"] }
        command << ["-d", payload] if payload
        command << url

        puts command.flatten.shelljoin
      end
    end
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
end

#!/usr/bin/env ruby
require 'rubygems'
require 'bundler'
Bundler.setup

begin
  require 'optparse'
  require 'jsonapi_cli'
  require 'jsonapi_cli/resource'
  require 'json'
  require 'shellwords'

  options = {
    :mode => :payloads,
    :seed => ENV['JSONAPI_SEED'],
    :num  => 1,
    :resource_options => {},
    :resource_load_path => (ENV['JSONAPI_LOAD_PATH'] || 'resources').split(':'),
    :resource_locale_path => (ENV['JSONAPI_LOCALE_PATH'] || 'locales').split(':'),
  }
  OptionParser.new do |opts|
    opts.banner = %{
usage: jsonapi-generate [options] RESOURCE[:COUNT] ...

  Generate payloads from resource descriptions.

options:

}.lstrip

    opts.on("--[no-]attributes-only", "generate attributes onlu") do |value|
      options[:mode] = value ? :attributes : :payloads
    end

    opts.on("-h", "--help", "print this help") do
      puts opts
      puts
      puts JsonapiCli.version
      exit
    end

    opts.on("-l", "--list-mode MODE", "sets list mode ") do |value|
      options[:resource_options][:list_mode] = value.to_sym
    end

    opts.on("-n", "--num NUM", "number of each resource to generate") do |value|
      options[:num] = value
    end

    opts.on("-s", "--seed SEED", "set seed value") do |value|
      options[:seed] = value
    end
  end.parse!

  resource_specs = ARGV.dup; ARGV.clear

  resource_locale_path = options[:resource_locale_path]
  resource_locale_path.each do |dir|
    Dir[File.join(dir, "**", "*.yml")].each do |file|
      I18n.load_path << File.expand_path(file)
    end
  end

  resource_load_path = options[:resource_load_path]
  resource_load_path.each do |dir|
    Dir[File.join(dir, "**", "*.rb")].each do |file|
      require File.expand_path(file)
    end
  end

  if seed = options[:seed]
    Random.srand(seed.to_i)
  end

  mode = options[:mode]
  default_num  = options[:num].to_i
  resource_options = options[:resource_options]

  cache = JsonapiCli::Cache.new
  resource_specs.each do |spec|
    type, num = spec.split(":", 2)
    num = num ? num.to_i : default_num 

    resource_class = JsonapiCli::Resource.fetch(type)
    num.to_i.times do
      resource = resource_class.create(resource_options, cache)
      resource.save
    end
  end

  cache.each do |resource|
    case mode
    when :attributes
      puts resource.attributes.to_json
    when :payloads
      puts resource.payload.to_json
    end
  end

rescue Interrupt
  exit 130
rescue Errno::EPIPE
  exit 0
end
